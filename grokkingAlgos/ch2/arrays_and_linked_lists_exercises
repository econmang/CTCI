Ch. 2 Exercises
---------------

2.1) Suppose you're building an app to keep track of finances and every day you write down what you spent money on.
     Then at the end of each month, you review each item in the list to review what you spent money on.
     Should you use an array or linked list for this use case?

    - You should use a linked list since you'll be inserting frequently. And since you plan to read every node
      in the list anyways, there is no performance hit to traversal of the LL.

2.2) You're building an app for a restaurant to take customer order. Your app needs to store a list of order.
     Chef pulls each individually off the queue and cooks it. Should you use an array or LL?

     - LL because you are going to be writing/deleting often and only will be reading in a sequential manner.

2.3) Sp FB keeps a list of usernames. When someone tris to log in to FB, it has to search for the name in list.
     If it's there, they can log in. To speed this up, they use binary search, which needs random access.
     Should you use LL or array?

     - Array because you require random access and will be doing reads often.

2.4) Sp you're using an array. What are the downsides when having to add users?

    - If the number of users exceeds the given capacity, it would require to completely copy the array
      to allocate space for the new user. Plus, the addition of a user means you'd have to re-sort the array
      in order to use binary search.

2.5) Consider a hybrid data structure: An array of linked lists. You have an array w/ 26 slots. Each slot points
     to a linked list, where each list could store the user named starting with a certain letter. How would the
     new data structure compare in terms of inserts and reads?

     - Inserts would be made faster as you could just go to the correct bucket in the array and then it would take
       O(1) to insert into the LL. Reads would slower. You would know the bucket to look in, reducing the overall
       search size, but worst case search runtime would still be O(m)
       [m some number smaller than n, the total number of users] since the underlying structure is a LL. So slower than
       the array, but faster than the LL.
